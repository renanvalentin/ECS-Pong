//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public OverlapCircleCollisionComponent overlapCircleCollision { get { return (OverlapCircleCollisionComponent)GetComponent(GameComponentsLookup.OverlapCircleCollision); } }
    public bool hasOverlapCircleCollision { get { return HasComponent(GameComponentsLookup.OverlapCircleCollision); } }

    public void AddOverlapCircleCollision(Entitas.IEntity newOther, float newRadius) {
        var index = GameComponentsLookup.OverlapCircleCollision;
        var component = CreateComponent<OverlapCircleCollisionComponent>(index);
        component.other = newOther;
        component.radius = newRadius;
        AddComponent(index, component);
    }

    public void ReplaceOverlapCircleCollision(Entitas.IEntity newOther, float newRadius) {
        var index = GameComponentsLookup.OverlapCircleCollision;
        var component = CreateComponent<OverlapCircleCollisionComponent>(index);
        component.other = newOther;
        component.radius = newRadius;
        ReplaceComponent(index, component);
    }

    public void RemoveOverlapCircleCollision() {
        RemoveComponent(GameComponentsLookup.OverlapCircleCollision);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherOverlapCircleCollision;

    public static Entitas.IMatcher<GameEntity> OverlapCircleCollision {
        get {
            if (_matcherOverlapCircleCollision == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.OverlapCircleCollision);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherOverlapCircleCollision = matcher;
            }

            return _matcherOverlapCircleCollision;
        }
    }
}
